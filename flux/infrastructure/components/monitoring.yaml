---
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring

---
apiVersion: source.toolkit.fluxcd.io/v1
kind: HelmRepository
metadata:
  name: prometheus-community
  namespace: monitoring
spec:
  interval: 24h
  url: https://prometheus-community.github.io/helm-charts

---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: prometheus-stack
  namespace: monitoring
spec:
  interval: 30m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: "75.15.0"
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: monitoring
      interval: 12h
  values:
    fullnameOverride: "p"
    defaultRules:
      create: true
      rules:
        windows: false

    alertmanager:
      fullnameOverride: alertmanager
      enabled: true
      ingress:
        enabled: true
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-dns01-cloudflare"
        hosts:
          - alertmanager.hata.foo
        tls:
          - secretName: alertmanager-general-tls
            hosts:
              - alertmanager.hata.foo

    grafana:
      fullnameOverride: grafana
      enabled: true

      admin:
        existingSecret: grafana-admin

      ingress:
        enabled: true
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-dns01-cloudflare"
        hosts:
          - grafana.hata.foo
        tls:
          - secretName: grafana-general-tls
            hosts:
              - grafana.hata.foo
      additionalDataSources:
        - name: Loki
          type: loki
          url: http://loki-gateway
          jsonData:
            X-Scope-OrgID: "homeland"

      dashboardProviders:
        dashboardproviders.yaml:
          apiVersion: 1
          providers:
            - name: "default"
              orgId: 1
              folder: ""
              type: file
              disableDeletion: false
              editable: true
              options:
                path: /var/lib/grafana/dashboards/default

      dashboards:
        default:
          loki:
            gnetId: 13186
            datasource: Loki

    nodeExporter:
      fullnameOverride: node-exporter
      enabled: true
      operatingSystems:
        linux:
          enabled: true
        aix:
          enabled: false
        darwin:
          enabled: false

    prometheusOperator:
      fullnameOverride: prometheus-operator

    prometheus-node-exporter:
      fullnameOverride: node-exporter

    kube-state-metrics:
      fullnameOverride: kube-state-metrics

    cleanPrometheusOperatorObjectNames: true

---
apiVersion: source.toolkit.fluxcd.io/v1
kind: HelmRepository
metadata:
  name: grafana
  namespace: monitoring
spec:
  interval: 24h
  url: https://grafana.github.io/helm-charts

---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: loki
  namespace: monitoring
spec:
  interval: 30m
  chart:
    spec:
      chart: loki
      version: "6.34.0"
      sourceRef:
        kind: HelmRepository
        name: grafana
        namespace: monitoring
      interval: 12h
  values:
    loki:
      commonConfig:
        replication_factor: 1
      schemaConfig:
        configs:
          - from: "2024-04-01"
            store: tsdb
            object_store: s3
            schema: v13
            index:
              prefix: loki_index_
              period: 24h
      pattern_ingester:
        enabled: true
      limits_config:
        allow_structured_metadata: true
        volume_enabled: true
      ruler:
        enable_api: true

    minio:
      enabled: true

    deploymentMode: SingleBinary

    singleBinary:
      replicas: 1

    # Zero out replica counts of other deployment modes
    backend:
      replicas: 0
    read:
      replicas: 0
    write:
      replicas: 0

    ingester:
      replicas: 0
    querier:
      replicas: 0
    queryFrontend:
      replicas: 0
    queryScheduler:
      replicas: 0
    distributor:
      replicas: 0
    compactor:
      replicas: 0
    indexGateway:
      replicas: 0
    bloomCompactor:
      replicas: 0
    bloomGateway:
      replicas: 0

---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: alloy
  namespace: monitoring
spec:
  interval: 30m
  chart:
    spec:
      chart: alloy
      version: "1.2.0"
      sourceRef:
        kind: HelmRepository
        name: grafana
        namespace: monitoring
      interval: 12h
  values:
    alloy:
      configMap:
        # -- Create a new ConfigMap for the config file.
        create: true
        # -- Content to assign to the new ConfigMap.  This is passed into `tpl` allowing for templating from values.
        content: |
          loki.write "default" {
            endpoint {
              url = "http://loki-gateway/loki/api/v1/push"
              tenant_id = "homeland"
            }
          }

          // discovery.kubernetes allows you to find scrape targets from Kubernetes resources.
          // It watches cluster state and ensures targets are continually synced with what is currently running in your cluster.
          discovery.kubernetes "pod" {
            role = "pod"
          }

          // discovery.relabel rewrites the label set of the input targets by applying one or more relabeling rules.
          // If no rules are defined, then the input targets are exported as-is.
          discovery.relabel "pod_logs" {
            targets = discovery.kubernetes.pod.targets

            // Label creation - "namespace" field from "__meta_kubernetes_namespace"
            rule {
              source_labels = ["__meta_kubernetes_namespace"]
              action = "replace"
              target_label = "namespace"
            }

            // Label creation - "pod" field from "__meta_kubernetes_pod_name"
            rule {
              source_labels = ["__meta_kubernetes_pod_name"]
              action = "replace"
              target_label = "pod"
            }

            // Label creation - "container" field from "__meta_kubernetes_pod_container_name"
            rule {
              source_labels = ["__meta_kubernetes_pod_container_name"]
              action = "replace"
              target_label = "container"
            }

            // Label creation -  "app" field from "__meta_kubernetes_pod_label_app_kubernetes_io_name"
            rule {
              source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
              action = "replace"
              target_label = "app"
            }

            // Label creation -  "job" field from "__meta_kubernetes_namespace" and "__meta_kubernetes_pod_container_name"
            // Concatenate values __meta_kubernetes_namespace/__meta_kubernetes_pod_container_name
            rule {
              source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
              action = "replace"
              target_label = "job"
              separator = "/"
              replacement = "$1"
            }

            // Label creation - "container" field from "__meta_kubernetes_pod_uid" and "__meta_kubernetes_pod_container_name"
            // Concatenate values __meta_kubernetes_pod_uid/__meta_kubernetes_pod_container_name.log
            rule {
              source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
              action = "replace"
              target_label = "__path__"
              separator = "/"
              replacement = "/var/log/pods/*$1/*.log"
            }

            // Label creation -  "container_runtime" field from "__meta_kubernetes_pod_container_id"
            rule {
              source_labels = ["__meta_kubernetes_pod_container_id"]
              action = "replace"
              target_label = "container_runtime"
              regex = "^(\\S+):\\/\\/.+$"
              replacement = "$1"
            }
          }

          // loki.source.kubernetes tails logs from Kubernetes containers using the Kubernetes API.
          loki.source.kubernetes "pod_logs" {
            targets    = discovery.relabel.pod_logs.output
            forward_to = [loki.process.pod_logs.receiver]
          }

          // loki.process receives log entries from other Loki components, applies one or more processing stages,
          // and forwards the results to the list of receivers in the component's arguments.
          loki.process "pod_logs" {
            stage.static_labels {
                values = {
                  cluster = "homeland",
                }
            }

            forward_to = [loki.write.default.receiver]
          }
